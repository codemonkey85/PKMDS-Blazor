@inherits BasePkmdsComponent

@if (Pokemon is { Generation: { } pokemonGeneration } &&
AppState.SaveFile is { Context: { } saveFileEntityContext, Generation: { } saveGeneration } &&
saveFileEntityContext is not
EntityContext.None or
EntityContext.SplitInvalid or
EntityContext.MaxInvalid &&
((AppState.SelectedBoxNumber is not null && AppState.SelectedBoxSlotNumber is not null) || (AppState.SelectedPartySlotNumber is not null)))
{
    @if (pokemonGeneration >= 3)
    {
        <MudNumericField Label="PID"
                         Variant="@Variant.Outlined"
                         @bind-Value="@Pokemon.PID"
                         @bind-Value:after="@(() => { AppService.LoadPokemonStats(Pokemon); RefreshService.Refresh(); })"
                         For="@(() => Pokemon.PID)" />
    }

    <MudAutocomplete T="@ComboItem"
                     Label="Species"
                     Variant="@Variant.Outlined"
                     @bind-Value:get="@(AppService.GetSpeciesComboItem(Pokemon.Species))"
                     @bind-Value:set="@((species) => { Pokemon.Species = (ushort)species.Value; AppService.LoadPokemonStats(Pokemon); RefreshService.Refresh(); })"
                     SearchFunc="@((searchString) => Task.FromResult(AppService.SearchPokemonNames(searchString)))"
                     ToStringFunc="@((species) => species?.Text)" />

    @TypeSummary(Pokemon.GetGenerationTypes())

    @if (Pokemon is PK9 pK9)
    {
        @TeraTypeSummary((byte)pK9.TeraType)
    }

    <MudCheckBox Label="Is Nicknamed"
                 @bind-Value="@Pokemon.IsNicknamed"
                 For="@(() => Pokemon.IsNicknamed)" />

    <MudTextField Label="Nickname"
                  Variant="@Variant.Outlined"
                  @bind-Value="@Pokemon.Nickname"
                  For="@(() => Pokemon.Nickname)" />

    <MudNumericField Label="EXP"
                     Variant="@Variant.Outlined"
                     @bind-Value="@Pokemon.EXP"
                     @bind-Value:after="@(() => AppService.LoadPokemonStats(Pokemon))"
                     For="@(() => Pokemon.EXP)" />

    <MudNumericField Label="Level"
                     Variant="@Variant.Outlined"
                     @bind-Value="@Pokemon.CurrentLevel"
                     @bind-Value:after="@(() => AppService.LoadPokemonStats(Pokemon))"
                     For="@(() => Pokemon.CurrentLevel)" />

    @if (pokemonGeneration >= 3)
    {
        <MudSelect Label="Nature"
                   Variant="@Variant.Outlined"
                   @bind-Value:get="@Pokemon.Nature"
                   @bind-Value:set="@OnNatureSet"
                   For="@(() => Pokemon.Nature)">
            @foreach (var nature in GameInfo.FilteredSources.Natures)
            {
                <MudSelectItem Value="@((Nature)nature.Value)">
                    <MudStack>
                        <MudText>
                            @nature.Text
                    </MudText>
                    @{
                        var str = AppService.GetStatModifierString((Nature)nature.Value);
                    }
                    @if (str is { Length: > 0 })
                    {
                        <MudText>
                            @str
                        </MudText>
                    }
                </MudStack>
            </MudSelectItem>
            }
        </MudSelect>
    }

    @if (Pokemon is IFormArgument && (Pokemon is { PersonalInfo.HasForms: true } || Pokemon is { Species: (ushort)Species.Unown }))
    {
        var forms = FormConverter.GetFormList(Pokemon.Species, GameInfo.Strings.types, GameInfo.Strings.forms, GameInfo.GenderSymbolUnicode, Pokemon.Context);
        if (forms.AsEnumerable().Any(f => !string.IsNullOrEmpty(f)))
        {
            <MudSelect T="@byte"
                       @ref="@FormSelect"
                       Label="Forme"
                       Variant="@Variant.Outlined"
                       @bind-Value="@Pokemon.Form"
                       @bind-Value:after="@(() => { AppService.LoadPokemonStats(Pokemon); RefreshService.Refresh(); })"
                       For="@(() => Pokemon.Form)">
                @for (byte i = 0; i < forms.Length; i++)
                {
                    var formId = i;
                    <MudSelectItem Value="@formId">
                        @forms[formId]
                    </MudSelectItem>
                }
            </MudSelect>

            @if (Pokemon is IFormArgument && FormArgumentUtil.GetFormArgumentMax(Pokemon.Species, Pokemon.Form, Pokemon.Context) > 0 && FormConverter.GetFormArgumentIsNamedIndex(Pokemon.Species))
            {
                <MudSelect T="@(uint?)"
                           Label="Forme Arg"
                           Variant="@Variant.Outlined"
                           @bind-Value:get="@(Pokemon.GetFormArgument())"
                           @bind-Value:set="@((formArg) => { Pokemon.ChangeFormArgument(formArg ?? 0); AppService.LoadPokemonStats(Pokemon); RefreshService.Refresh(); })">
                    @{
                        var formArgs = FormConverter.GetFormArgumentStrings(Pokemon.Species);
                    }
                    @for (uint? i = 0; i < formArgs.Length; i++)
                    {
                        var formArg = i;
                        <MudSelectItem Value="@(formArg)">
                            @formArgs[formArg ?? 0]
                        </MudSelectItem>
                    }
                </MudSelect>
            }
        }
    }

    <MudAutocomplete T="@ComboItem"
                     Label="Held Item"
                     Variant="@Variant.Outlined"
                     @bind-Value:get="@(AppService.GetItemComboItem(Pokemon.HeldItem))"
                     @bind-Value:set="@((item) => { Pokemon.HeldItem = item.Value; AppService.LoadPokemonStats(Pokemon); RefreshService.Refresh(); })"
                     SearchFunc="@((searchString) => Task.FromResult(AppService.SearchItemNames(searchString)))"
                     ToStringFunc="@((item) => item?.Text)">
        <ItemTemplate Context="item">
            <MudStack Row>
                @if (item.Value != 0)
                {
                    var pkm = Pokemon.Clone();
                    pkm.HeldItem = item.Value;
                    <MudImage Src="@SpriteHelper.GetArtworkItemSpriteFilename(pkm.SpriteItem)"
                              ObjectFit="@ObjectFit.Contain"
                              ObjectPosition="@ObjectPosition.Center"
                              Width="22"
                              Height="22" />
                }
                <MudText>
                    @item.Text
                </MudText>
            </MudStack>
        </ItemTemplate>
    </MudAutocomplete>

    @if (pokemonGeneration >= 3)
    {
        <MudAutocomplete T="@ComboItem"
                         Label="Ability"
                         Variant="@Variant.Outlined"
                         @bind-Value:get="@(AppService.GetAbilityComboItem(Pokemon.Ability))"
                         @bind-Value:set="@((ability) => Pokemon.Ability = ability.Value)"
                         SearchFunc="@((searchString) => Task.FromResult(AppService.SearchAbilityNames(searchString)))"
                         ToStringFunc="@((ability) => ability?.Text)" />
    }

    @if (pokemonGeneration >= 4)
    {
        <MudSelect Label="Language"
                   Variant="@Variant.Outlined"
                   @bind-Value="@Pokemon.Language"
                   For="@(() => Pokemon.Language)">
            @foreach (var language in GameInfo.FilteredSources.Languages)
            {
                <MudSelectItem Value="language.Value">
                    @language.Text
            </MudSelectItem>
            }
        </MudSelect>
    }

    @if (pokemonGeneration >= 2)
    {
        <MudNumericField Label="Friendship"
                         Variant="@Variant.Outlined"
                         T="@byte"
                         Min="0"
                         Max="255"
                         @bind-Value="@Pokemon.CurrentFriendship"
                         For="@(() => Pokemon.CurrentFriendship)" />

        <MudStack Row>

            <MudCheckBox Label="Is Egg"
                         @bind-Value="@Pokemon.IsEgg"
                         @bind-Value:after="@RefreshService.Refresh"
                         For="@(() => Pokemon.IsEgg)" />

            <MudCheckBox Label="Infected"
                         @bind-Value="@Pokemon.IsPokerusInfected"
                         @bind-Value:after="@RefreshService.Refresh"
                         For="@(() => Pokemon.IsPokerusInfected)" />

            <MudCheckBox Label="Cured"
                         @bind-Value="@Pokemon.IsPokerusCured"
                         @bind-Value:after="@RefreshService.Refresh"
                         For="@(() => Pokemon.IsPokerusCured)" />
            @*
    <MudCheckBox Label="N's Sparkle"
    @bind-Value="@Pokemon"
    @bind-Value:after="@RefreshService.Refresh"
    For="@(() => Pokemon.IsPokerusCured)" />
    *@

            <MudCheckBox Label="Shiny"
                         Value="@Pokemon.IsShiny"
                         ReadOnly
                         For="@(() => Pokemon.IsShiny)" />

        </MudStack>
    }
}
